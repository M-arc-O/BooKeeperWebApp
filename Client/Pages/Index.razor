@page "/"
@using System.Security.Claims
@using BooKeeperWebApp.Shared.Models;
@using Client.Authentication;
@using Client.Components
@using Microsoft.AspNetCore.Components.Authorization

@inject AuthenticationStateProvider _authenticationStateProvider;
@inject HttpClient Http;

<PageTitle>BooKeeper</PageTitle>
<AuthorizeView>
    <Authorized>
        <Overview />
    </Authorized>
    <NotAuthorized>
        <div class="text-center">
            <RadzenImage Style="width: 750px" Path="Images/UnderConstruction.png" />
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private string? authName;
    private string? authProvider;
    private IEnumerable<Claim> claims = Enumerable.Empty<Claim>();
    private ClientPrincipal backendClientPrincipal = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        authProvider = (_authenticationStateProvider as ClientAuthenticationStateProvider)!.IdentityProvider;
        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            authName = user.Identity.Name;
            claims = user.Claims;

            await MakeSureUserExsistsAsync();
        }
        else
        {
            authName = "The user is NOT authentifcated.";
        }
    }

    private async Task MakeSureUserExsistsAsync()
    {
        backendClientPrincipal = await Http.GetFromJsonAsync<ClientPrincipal>("/api/user/get") ?? new ClientPrincipal();
    }
}
