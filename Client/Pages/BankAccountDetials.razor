@page "/bankaccountdetails/{id}"
@using BooKeeperWebApp.Shared.Dtos.Bank;
@using BooKeeperWebApp.Shared.Enums;
@using Client.Components
@using Client.Services.Bank;

@inject BankAccountService _bankAccountService

<PageTitle>Account details @_bankAccountService.Item?.Name</PageTitle>

<h2>@_bankAccountService.Item?.Name</h2>

<div class="container-fluid h-100">
    <div class="row">
        <div class="col-4">
            <RadzenCard>
                <div class="row">
                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Account information</RadzenText>
                </div>
                <div class="row">
                    <div class="col-md-6 align-items-center d-flex">
                        <RadzenLabel Text="Account number:" />
                    </div>
                    <div class="col-md-6">
                        <RadzenTextBox style="width: 100%;" Name="AccountNumber" Value="@_bankAccountService.Item?.Number" Disabled="true" />
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6 align-items-center d-flex">
                        <RadzenLabel Text="Current amount:" />
                    </div>
                    <div class="col-md-6">
                        <RadzenTextBox style="width: 100%;" Name="CurrentAmount" Value="@($"€ {_bankAccountService.Item?.CurrentAmount.ToString("F2")}")" Disabled="true" />
                    </div>
                </div>
            </RadzenCard>
        </div>
    </div>
    <div class="row jusitify-content-left">
        <div class="col">
            @if (_bankAccountService.Loading)
            {
                <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
            }
            <RadzenDataGrid AllowAlternatingRows="false"
                            AllowPaging="true"
                            PageSize="8"
                            AllowSorting="true"
                            AllowFiltering="true"
                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            FilterMode="FilterMode.Simple"
                            EditMode="DataGridEditMode.Single"
                            Data="@_bankAccountService.Item?.Mutations?.OrderByDescending(x => x.Date)"
                            TItem="MutationDto">
                <Columns>
                    <RadzenDataGridColumn TItem="MutationDto" Property="Date" Title="Date" FormatString="{0,8:dd/MM/yyyy}" Width="75px" />
                    <RadzenDataGridColumn TItem="MutationDto" Property="OtherAccountNumber" Title="Other account" Width="125px" />
                    <RadzenDataGridColumn TItem="MutationDto" Property="Description" Title="Description" Width="100px" />
                    <RadzenDataGridColumn TItem="MutationDto" Property="Amount" Title="Amount" TextAlign="TextAlign.Right" Width="60px">
                        <Template>
                            @($"€ {context.Amount.ToString("F2")}")
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="MutationDto" Property="Comment" Title="Comment" Width="250px">
                        <Template>
                            <p style="white-space:pre-wrap">@context.Comment</p>
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="MutationDto" Property="Tag" Title="Tag" Width="100px" />
                    <RadzenDataGridColumn TItem="MutationDto" Property="BookName" Title="Book" Width="150px" />
                    <RadzenDataGridColumn TItem="MutationDto" Property="EventName" Title="Event" Width="150px" />
                </Columns>
            </RadzenDataGrid>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string? Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _bankAccountService.RefreshRequested += RefreshMe;
    }

    protected override async Task OnParametersSetAsync()
    {
        await _bankAccountService.GetById(Guid.Parse(Id!));
    }

    public void Dispose()
    {
        _bankAccountService.RefreshRequested -= RefreshMe;
    }

    private void RefreshMe()
    {
        StateHasChanged();
    }
}
