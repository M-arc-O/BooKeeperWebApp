@page "/bankaccounts"

@using BooKeeperWebApp.Shared
@using BooKeeperWebApp.Shared.Dtos;
@using BooKeeperWebApp.Shared.Enums;
@using BooKeeperWebApp.Shared.Models;
@using Microsoft.AspNetCore.Authorization;

@inject BankAccountService BankAccountService;
@inject NotificationService NotificationService;
@inject DialogService DialogService;

<PageTitle>Accounts</PageTitle>

<RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" Class="mt-2 mb-4" Text="Add New Account" Click="@InsertRow" Disabled=@(inserting || updating || busy) />

@if (BankAccountService.Loading)
{
    <RadzenLabel>Loading bank accounts:</RadzenLabel>
    <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
}

<RadzenDataGrid @ref="accountsGrid" AllowAlternatingRows="false" AllowFiltering="true" AllowPaging="true" PageSize="15" AllowSorting="true" EditMode="DataGridEditMode.Single"
                Data="@BankAccountService.Accounts" TItem="BankAccountDto" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" Sort="@Reset" Page="@Reset" Filter="@Reset">
    <Columns>
        <RadzenDataGridColumn TItem="BankAccountDto" Property="Name" Title="Name" Width="225px">
            <EditTemplate Context="account">
                <RadzenTextBox @bind-Value="account.Name" Style="width:100%; display: block" Name="Name" />
                <RadzenRequiredValidator Text="Name is required" Component="Name" Popup="true" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="BankAccountDto" Property="Number" Title="Number" Width="150px">
            <EditTemplate Context="account">
                <RadzenTextBox @bind-Value="account.Number" Style="width:100%; display: block" Name="Number" />
                <RadzenRequiredValidator Text="Number is required" Component="Number" Popup="true" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="BankAccountDto" Property="Type" Title="Bank" Width="100px">
            <Template Context="account">
                @account.Type.ToString()
            </Template>
            <EditTemplate Context="account">
                <RadzenDropDown @bind-Value="account.Type" Data="@AccountTypes" Style="width:100%; display: block;">
                </RadzenDropDown>
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="BankAccountDto" Property="StartAmount" Title="Start amount" Width="150px">
            <EditTemplate Context="account">
                <RadzenNumeric @bind-Value="account.StartAmount" Style="width:100%" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="BankAccountDto" Property="CurrentAmount" Title="Current Amount" Width="150px" />
        <RadzenDataGridColumn TItem="BankAccountDto" Context="account" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="156px">
            <Template Context="account">
                <RadzenButton IsBusy=@busy Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(account))" @onclick:stopPropagation="true" />
                <RadzenButton IsBusy=@busy ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" Class="my-1 ms-1" Click="@(args => DeleteRow(account))" @onclick:stopPropagation="true" />
            </Template>
            <EditTemplate Context="account">
                <RadzenButton IsBusy=@busy Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(account))">
                </RadzenButton>
                <RadzenButton IsBusy=@busy Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Class="my-1 ms-1" Click="@((args) => CancelEdit(account))">
                </RadzenButton>
                <RadzenButton IsBusy=@busy ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" Class="my-1 ms-1" Click="@(args => DeleteRow(account))">
                </RadzenButton>
            </EditTemplate>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    private bool busy = false;
    private bool inserting = false;
    private bool updating = false;

    RadzenDataGrid<BankAccountDto>? accountsGrid;
    IEnumerable<AccountType> AccountTypes = Enum.GetValues(typeof(AccountType)).Cast<AccountType>();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await BankAccountService.GetBankAccountsAsync();
    }

    void Reset()
    {
        inserting = false;
        updating = false;
    }

    async Task InsertRow()
    {
        inserting = true;
        await accountsGrid!.InsertRow(new BankAccountDto());
    }

    async Task EditRow(BankAccountDto account)
    {
        await accountsGrid!.EditRow(account);
    }

    void CancelEdit(BankAccountDto account)
    {
        inserting = false;
        updating = false;
        accountsGrid!.CancelEditRow(account);
    }

    async Task SaveRow(BankAccountDto account)
    {
        await accountsGrid!.UpdateRow(account);
    }

    async Task OnCreateRow(BankAccountDto account)
    {
        try
        {
            busy = true;
            var message = await BankAccountService.CreateBankAccountAsync(account);
            HandleError(message);

            await BankAccountService.GetBankAccountsAsync();
        }
        finally
        {
            busy = false;
            inserting = false;
        }
    }

    async Task OnUpdateRow(BankAccountDto account)
    {
        try
        {
            busy = true;
            var message = await BankAccountService.UpdateBankAccountAsync(account);
            HandleError(message);

            await BankAccountService.GetBankAccountsAsync();
        }
        finally
        {
            busy = false;
            inserting = false;
            updating = false;
        }
    }

    async Task DeleteRow(BankAccountDto account)
    {
        try
        {
            if (account.Id != Guid.Empty)
            {
                var confirmResult = await DialogService.Confirm(
                    $"Are you sure you want to delete '{account.Name}', this cannot be undone.", 
                    "Warning!",
                    new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No", Style = "" });

                if (confirmResult.HasValue && confirmResult.Value)
                {
                    busy = true;
                    var message = await BankAccountService.DeleteBankAccountAsync(account.Id);
                    HandleError(message);

                    await BankAccountService.GetBankAccountsAsync();
                }
            }
        }
        finally
        {
            busy = false;
            inserting = false;
            updating = false;
        }
    }

    private void HandleError(string message)
    {
        if (!string.IsNullOrEmpty(message))
        {
            NotificationService.Notify(new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Error: ",
                    Detail = message,
                    Duration = 4000
                });
        }
    }
}
