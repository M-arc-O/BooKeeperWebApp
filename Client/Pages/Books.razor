@page "/books"
@using BooKeeperWebApp.Shared.Dtos.Bank;
@using Client.Components
@using Client.Services.Bank;

@inject BookService _bookService;
@inject DialogService _dialogService;

<PageTitle>Books</PageTitle>
<div class="container-fluid h-100">
    <div class="row h-100">
        <div class="col-3">
            <RadzenCard class="h-100">
                <div class="container-fluid h-100">
                    <div class="row justify-content-end">
                        <div class="col">
                            <div class="row justify-content-between">
                                <div class="col">
                                    <RadzenTextBox @bind-Value=@bookName
                                                   Placeholder="Name"
                                                   Class="w-100"
                                                   Change="OnNameTextBoxChange" />
                                </div>
                                <div class="col-md-auto">
                                    <RadzenButton IsBusy=@(_bookService.Creating || _bookService.Updating || _bookService.Deleting)
                                                  Click=@OnSaveClick
                                                  Variant="Variant.Outlined"
                                                  ButtonStyle="ButtonStyle.Secondary"
                                                  Size="ButtonSize.Medium"
                                                  Icon="save" />
                                    <RadzenButton IsBusy=@(_bookService.Creating || _bookService.Updating || _bookService.Deleting)
                                                  Click=@OnDeleteClick
                                                  Variant="Variant.Outlined"
                                                  ButtonStyle="ButtonStyle.Danger"
                                                  Shade="Shade.Lighter"
                                                  Size="ButtonSize.Medium"
                                                  Icon="delete" />
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row" style="min-height: 95%; max-height: 95%;">
                        <div class="col">
                            <RadzenListBox @ref="bookListBox"
                                           AllowFiltering="true"
                                           FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                           Data=@_bookService.Items
                                           TValue="BookDto"
                                           TextProperty="Name"
                                           ValueProperty="Id"
                                           Change=@(args => OnListBoxChange(args))
                                           Style="min-height: 90%; max-height: 90%;"
                                           Class="w-100" />
                        </div>
                    </div>
                </div>
            </RadzenCard>
        </div>
        <div class="col-9">
            <RadzenCard class="h-100">
                @if (selectedBook != null && selectedBook.Id != Guid.Empty)
                {
                    <BookDetails Id=@selectedBook.Id.ToString() />
                }
            </RadzenCard>
        </div>
    </div>
</div>

@code {
    private RadzenListBox<BookDto>? bookListBox;
    private BookDto selectedBook = new BookDto();
    private string? bookName;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await _bookService.LoadAsync();

        _bookService.RefreshRequested += RefreshMe;
    }
    
    public void Dispose()
    {
        _bookService.RefreshRequested -= RefreshMe;
    }

    void OnNameTextBoxChange()
    {
        if (string.IsNullOrEmpty(bookName))
        {
            ResetSelectedItem();
        }
    }

    async Task OnSaveClick()
    {
        selectedBook.Name = bookName;
        if (selectedBook.Id == Guid.Empty)
        {
            await _bookService.CreateBookAsync(selectedBook);
        }
        else
        {
            await _bookService.UpdateBookAsync(selectedBook);
        }
    }

    async Task OnDeleteClick()
    {
        var confirmResult = await _dialogService.Confirm(
                    $"Are you sure you want to delete '{selectedBook.Name}', this cannot be undone.",
                    "Warning!",
                    new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No", Style = "" });

        if (confirmResult.HasValue && confirmResult.Value)
        {
            if (await _bookService.DeleteAsync(selectedBook.Id))
            {
                ResetSelectedItem();
            }
        }
    }

    void OnListBoxChange(object id)
    {
        selectedBook = _bookService.Items.First(x => x.Id == (Guid)id);
        bookName = selectedBook.Name!;
    }

    private void ResetSelectedItem()
    {
        selectedBook = new BookDto();
        bookListBox!.Reset();
    }

    private void RefreshMe()
    {
        StateHasChanged();
    }
}