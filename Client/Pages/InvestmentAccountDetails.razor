@page "/investmentaccountdetails/{id}"
@using BooKeeperWebApp.Shared.Dtos.Investment;
@using BooKeeperWebApp.Shared.Enums;
@using BooKeeperWebApp.Shared.Models.Investment;
@using Client.Components;
@using Client.Services.Investment;

@inject InvestmentAccountService _investmentAccountService
@inject InvestmentService _investmentService
@inject DialogService _dialogService
@inject NotificationService _notificationService

<PageTitle>Account details @_investmentAccountService.Item?.Name</PageTitle>

<h2>@_investmentAccountService.Item?.Name</h2>

<div class="container-fluid h-100">
    <div class="row">
        <div class="col-3">
            <RadzenCard>
                <div class="row">
                    <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Account information</RadzenText>
                </div>
                <div class="row">
                    <div class="col-md-7 align-items-center d-flex">
                        <RadzenLabel Text="Current amount:" />
                    </div>
                    <div class="col-md-5">
                        <RadzenTextBox style="width: 100%;" Name="CurrentAmount" Value="@($"€ {_investmentAccountService.Item?.CurrentAmount.ToString("F2")}")" Disabled="true" />
                    </div>
                </div>
            </RadzenCard>
        </div>
    </div>
    <hr />

    <RadzenTemplateForm TItem="Model" Data=@newModel Submit=@OnSubmit>
        <div class="row">
            <div class="col-2">
                <RadzenTextBox Name="InvestmentName" Placeholder="Investment name" @bind-Value=@newModel.Name />
                <RadzenRequiredValidator Component="InvestmentName" Text="Investment name is required" Popup=true Style="position: absolute" />
            </div>
            <div class="col-2">
                <RadzenButton ButtonType="ButtonType.Submit" Text="Add investment" />
            </div>
        </div>
    </RadzenTemplateForm>

    @if (_investmentAccountService.Item != null && _investmentAccountService.Item!.Investments != null)
    {
        <div class="row">
            <RadzenPanel AllowCollapse="false">
                <HeaderTemplate>
                    <h4 class="m-0 d-flex align-items-center">
                        <RadzenIcon Icon="account_box" Class="me-1" /><b>Investments</b>
                    </h4>
                </HeaderTemplate>
                <ChildContent>
                    <RadzenCard Class="mt-3">
                        <RadzenDataList PageSize="12" WrapItems="true" AllowPaging="true"
                                    Data="@_investmentAccountService.Item!.Investments" TItem="InvestmentDto">
                            <Template Context="investment">
                                <RadzenCard Style="width: 350px; max-width: 350px;">
                                    <div class="row">
                                        <div class="col-md-7 text-truncate">
                                            @if (editId != investment.Id)
                                            {
                                                <RadzenTextBox @bind-Value=investment.Name Disabled=true />
                                            }
                                            else
                                            {
                                                <RadzenTextBox @bind-Value=editModel.Name Disabled=false />                                                
                                            }
                                        </div>
                                        <div class="col-md-5 justify-content-end">
                                            @if (editId != investment.Id)
                                            {
                                                <RadzenButton IsBusy=@(_investmentService.Creating || _investmentService.Updating || _investmentService.Deleting)
                                                      Click=@(() => OnEditClick(investment))
                                                      Icon="edit"
                                                      ButtonStyle="ButtonStyle.Light"
                                                      Variant="Variant.Flat"
                                                      Size="ButtonSize.Medium" />
                                            }
                                            else
                                            {
                                                <RadzenButton IsBusy=@(_investmentService.Creating || _investmentService.Updating || _investmentService.Deleting)
                                                      Click=@(() => OnSaveClick(investment))
                                                      Icon="save"
                                                      ButtonStyle="ButtonStyle.Success"
                                                      Variant="Variant.Flat"
                                                      Size="ButtonSize.Medium" />
                                                <RadzenButton IsBusy=@(_investmentService.Creating || _investmentService.Updating || _investmentService.Deleting)
                                                      Click=@(() => OnDeleteClick(investment.Id))
                                                      Icon="delete"
                                                      ButtonStyle="ButtonStyle.Danger"
                                                      Variant="Variant.Flat"
                                                      Size="ButtonSize.Medium" />
                                                <RadzenButton IsBusy=@(_investmentService.Creating || _investmentService.Updating || _investmentService.Deleting)
                                                      Click=@OnCancelClick
                                                      Icon="close"
                                                      ButtonStyle="ButtonStyle.Light"
                                                      Variant="Variant.Flat"
                                                      Size="ButtonSize.Medium" />
                                            }
                                        </div>
                                    </div>
                                </RadzenCard>
                            </Template>
                        </RadzenDataList>
                    </RadzenCard>
                </ChildContent>
            </RadzenPanel>
        </div>
    }
</div>

@code {
    class Model
    {
        public string Name { get; set; } = string.Empty;
    }

    [Parameter]
    public string? Id { get; set; }

    private Model newModel = new();
    private Model editModel = new();

    private Guid editId = Guid.Empty;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _investmentAccountService.RefreshRequested += RefreshMe;
        _investmentService.RefreshRequested += RefreshMe;
    }

    protected override async Task OnParametersSetAsync()
    {
        await _investmentAccountService.GetById(Guid.Parse(Id!));
        _investmentService.Items = _investmentAccountService.Item?.Investments?.ToList()!;
    }

    private async Task OnSubmit(Model model)
    {
        await _investmentService.CreateInvestmentAsync(Guid.Parse(Id!), model.Name);
        await _investmentAccountService.GetById(Guid.Parse(Id!));
    }

    private void OnEditClick(InvestmentDto investment)
    {
        editId = investment.Id;
        editModel = new Model { Name = investment.Name };
    }

    private async Task OnSaveClick(InvestmentDto investment)
    {
        if (investment.Id != Guid.Empty)
        {
            if (string.IsNullOrEmpty(editModel.Name))
            {
                _notificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Error: ",
                        Detail = "Investment name cannot be empty",
                        Duration = 4000
                    });
            }
            else
            {
                bool result = await _investmentService.UpdateAsync(new AddInvestmentModel(Guid.Parse(Id!), editModel.Name), investment.Id);

                if (result)
                {
                    investment.Name = editModel.Name;
                    editId = Guid.Empty;
                }
            }
        }
    }

    private async Task OnDeleteClick(Guid id)
    {
        try
        {
            if (id != Guid.Empty)
            {
                var confirmResult = await _dialogService.Confirm(
                    $"Are you sure you want to delete '{editModel.Name}', this cannot be undone.",
                    "Warning!",
                    new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No", Style = "" });

                if (confirmResult.HasValue && confirmResult.Value)
                {
                    if (await _investmentService.DeleteAsync(id))
                    {
                        await _investmentAccountService.GetById(Guid.Parse(Id!));
                    }
                }
            }
        }
        finally
        {
            editId = Guid.Empty;
        }
    }

    private void OnCancelClick()
    {
        editId = Guid.Empty;
    }

    private void RefreshMe()
    {
        StateHasChanged();
    }
}